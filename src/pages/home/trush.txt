  // Step counter
  /*constructor(private stepcounter: Stepcounter) {
    let startingOffset = 0
    this.stepcounter.start(startingOffset)
    .then(onSuccess => console.log('stepcounter-start success', onSuccess),
    onFailure => console.log('stepcounter-start error', onFailure));

    this.stepcounter.getHistory()
    .then(historyObj => console.log('stepcounter-history success', historyObj),
    onFailure => console.log('stepcounter-history error', onFailure));

    setInterval(() => {stepcounter.getStepCount().then((cnt: number) => {console.log(cnt); this.count = cnt}).catch((err: any) => {alert("err")})}, 1000)
  }*/

    // QR reader
  /*constructor(private qrScanner: QRScanner) {
    // Optionally request the permission early
    this.qrScanner.prepare()
    .then((status: QRScannerStatus) => {
      if (status.authorized) {
      // camera permission was granted


      // start scanning
      let scanSub = this.qrScanner.scan().subscribe((text: string) => {
        console.log('Scanned something', text);

        this.qrScanner.hide(); // hide camera preview
        scanSub.unsubscribe(); // stop scanning
      });

      } else if (status.denied) {
        // camera permission was permanently denied
        // you must use QRScanner.openSettings() method to guide the user to the settings page
        // then they can grant the permission from there
      } else {
        // permission was denied, but not permanently. You can ask for permission again at a later time.
      }
    })
    .catch((e: any) => console.log('Error is', e));
  }*/